** ノイズ＝0.5 **
(base) tanzawaharukanoMacBook-Pro:pums harukatanzawa$ python rmse_vs_gcv.py
'pums_wa_cleaned_full.csv' を読み込みました。(7509行, 154列)
データを訓練用(5256件)とテスト用(2253件)に分割しました。
Calculating RMSE (on test set) and GCV (on train set)...
Calculation finished in 185.69 seconds.

--- 'ズレ'の分析 (No Noise) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6054 (推定誤差: 81204.97)
 [実際の最適性能]
   実際の最適なlog(λ): 4.8378 (実際の最小誤差: 80887.17)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80987.03
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 99.86

--- 'ズレ'の分析 (With Noise, Σ=0.5) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6054 (推定誤差: 81204.97)
 [実際の最適性能]
   実際の最適なlog(λ): 4.8378 (実際の最小誤差: 80887.17)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80987.03
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 99.85

--- 'ノイズ有無' の最終性能比較 ---
 ノイズなし の最小RMSE (実際の最適性能): 80887.17
 ノイズあり(Σ=0.5) の最小RMSE (実際の最適性能): 80887.17

   ▶︎ 性能の差 (ノイズあり - ノイズなし): 0.00
   (結論: ノイズを加えたことで、実際の予測誤差が 0.00 悪化しました。)


** ノイズ=1000000 **
(base) tanzawaharukanoMacBook-Pro:pums harukatanzawa$ python rmse_vs_gcv.py
'pums_wa_cleaned_full.csv' を読み込みました。(7509行, 154列)
データを訓練用(5256件)とテスト用(2253件)に分割しました。
Calculating RMSE (on test set) and GCV (on train set)...
Calculation finished in 187.28 seconds.

--- 'ズレ'の分析 (No Noise) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6054 (推定誤差: 81204.97)
 [実際の最適性能]
   実際の最適なlog(λ): 4.8378 (実際の最小誤差: 80887.17)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80987.03
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 99.86

--- 'ズレ'の分析 (With Noise, Σ=1000000) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6054 (推定誤差: 81205.47)
 [実際の最適性能]
   実際の最適なlog(λ): 4.8378 (実際の最小誤差: 80884.78)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80986.15
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 101.37

--- 'ノイズ有無' の最終性能比較 ---
 ノイズなし の最小RMSE (実際の最適性能): 80887.17
 ノイズあり(Σ=1000000) の最小RMSE (実際の最適性能): 80884.78

   ▶︎ 性能の差 (ノイズあり - ノイズなし): -2.40
   (結論: ノイズを加えたことで、実際の予測誤差が 2.40 改善しました。)

** ノイズ=10000000 **
(base) tanzawaharukanoMacBook-Pro:pums harukatanzawa$ python rmse_vs_gcv.py
'pums_wa_cleaned_full.csv' を読み込みました。(7509行, 154列)
データを訓練用(5256件)とテスト用(2253件)に分割しました。
Calculating RMSE (on test set) and GCV (on train set)...
Calculation finished in 184.27 seconds.
2025-10-22 19:35:56.875 python[34989:4593141] The class 'NSSavePanel' overrides the method identifier.  This method is implemented by class 'NSWindow'

--- 'ズレ'の分析 (No Noise) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6054 (推定誤差: 81204.97)
 [実際の最適性能]
   実際の最適なlog(λ): 4.8378 (実際の最小誤差: 80887.17)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80987.03
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 99.86

--- 'ズレ'の分析 (With Noise, Σ=10000000) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6984 (推定誤差: 81195.37)
 [実際の最適性能]
   実際の最適なlog(λ): 5.1169 (実際の最小誤差: 80874.47)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80986.81
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.5816
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 112.33

--- 'ノイズ有無' の最終性能比較 ---
 ノイズなし の最小RMSE (実際の最適性能): 80887.17
 ノイズあり(Σ=10000000) の最小RMSE (実際の最適性能): 80874.47

   ▶︎ 性能の差 (ノイズあり - ノイズなし): -12.70
   (結論: ノイズを加えたことで、実際の予測誤差が 12.70 改善しました。)

   ** ノイズ=10000000 **
(base) tanzawaharukanoMacBook-Pro:pums harukatanzawa$ python rmse_vs_gcv.py
'pums_wa_cleaned_full.csv' を読み込みました。(7509行, 154列)
データを訓練用(5256件)とテスト用(2253件)に分割しました。
Calculating RMSE (on test set) and GCV (on train set)...
Calculation finished in 186.08 seconds.
2025-10-22 19:40:30.401 python[35842:4611683] The class 'NSSavePanel' overrides the method identifier.  This method is implemented by class 'NSWindow'

--- 'ズレ'の分析 (No Noise) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6054 (推定誤差: 81204.97)
 [実際の最適性能]
   実際の最適なlog(λ): 4.8378 (実際の最小誤差: 80887.17)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80987.03
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 99.86

--- 'ズレ'の分析 (With Noise, Σ=100000000) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6984 (推定誤差: 81245.27)
 [実際の最適性能]
   実際の最適なlog(λ): 4.9308 (実際の最小誤差: 80818.10)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80938.75
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 120.65

--- 'ノイズ有無' の最終性能比較 ---
 ノイズなし の最小RMSE (実際の最適性能): 80887.17
 ノイズあり(Σ=100000000) の最小RMSE (実際の最適性能): 80818.10

   ▶︎ 性能の差 (ノイズあり - ノイズなし): -69.07
   (結論: ノイズを加えたことで、実際の予測誤差が 69.07 改善しました。)

   ** ノイズ=10000000000 **
   (base) tanzawaharukanoMacBook-Pro:pums harukatanzawa$ python rmse_vs_gcv.py
'pums_wa_cleaned_full.csv' を読み込みました。(7509行, 154列)
データを訓練用(5256件)とテスト用(2253件)に分割しました。
Calculating RMSE (on test set) and GCV (on train set)...
Calculation finished in 189.96 seconds.
2025-10-22 20:28:32.674 python[36819:4639851] The class 'NSSavePanel' overrides the method identifier.  This method is implemented by class 'NSWindow'

--- 'ズレ'の分析 (No Noise) ---
 [GCVの予測]
   GCVが選んだlog(λ): 6.6054 (推定誤差: 81204.97)
 [実際の最適性能]
   実際の最適なlog(λ): 4.8378 (実際の最小誤差: 80887.17)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 80987.03
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 1.7676
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 99.86

--- 'ズレ'の分析 (With Noise, Σ=10000000000) ---
 [GCVの予測]
   GCVが選んだlog(λ): 7.2566 (推定誤差: 82368.18)
 [実際の最適性能]
   実際の最適なlog(λ): 7.1636 (実際の最小誤差: 82160.40)
 [GCVを信じた結果]
   GCVが選んだλでの実際の誤差: 82169.85
 [ズレの数値化]
   ▶︎ 最適なlog(λ)のズレ (GCV予測 - 実際): 0.0930
   ▶︎ 性能のズレ (GCVを信じた場合の誤差の増加): 9.46

--- 'ノイズ有無' の最終性能比較 ---
 ノイズなし の最小RMSE (実際の最適性能): 80887.17
 ノイズあり(Σ=10000000000) の最小RMSE (実際の最適性能): 82160.40

   ▶︎ 性能の差 (ノイズあり - ノイズなし): 1273.22
   (結論: ノイズを加えたことで、実際の予測誤差が 1273.22 悪化しました。)